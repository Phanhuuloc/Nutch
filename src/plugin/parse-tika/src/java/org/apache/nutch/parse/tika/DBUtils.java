package org.apache.nutch.parse.tika;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.apache.nutch.parse.tika.model.Category;
import org.apache.nutch.parse.tika.model.CrawledBrand;
import org.apache.nutch.parse.tika.model.LocationInfo;
import org.apache.nutch.parse.tika.model.Product;
import org.apache.nutch.parse.tika.model.Quark;
import org.apache.nutch.parse.tika.model.QuarkCountry;
import org.apache.nutch.parse.tika.model.QuarkTranslation;
import org.apache.nutch.parse.tika.model.ValueBand;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Created by laphuoc on 9/23/2016.
 */

public class DBUtils {
	public static final Logger LOG = LoggerFactory.getLogger(DBUtils.class);
	private static final String DB_DRIVER = "com.mysql.jdbc.Driver";

	/**
	 * Get DBConnection
	 *
	 * @return
	 */
	public static synchronized Connection getDBConnection() throws IOException {
		Connection dbConnection = null;
		try {
			Class.forName(DB_DRIVER);
		} catch (ClassNotFoundException e) {
			LOG.error(e.getMessage());
		}
		try {
			Map<String, String> quarkPropValues = ParserUtils.getQuarkPropValues();
			String dbUrl = quarkPropValues.get("mysql.dbconnection");
			String user = quarkPropValues.get("mysql.user");
			String password = quarkPropValues.get("mysql.password");

			LOG.info("MySQL Info: url= " + dbUrl + " user= "
					+ user + " pass= " + password);

			dbConnection = DriverManager.getConnection(
					dbUrl, user, password);

			return dbConnection;
		} catch (Exception e) {
			LOG.error(e.getMessage());
		}

		return dbConnection;
	}

	/**
	 * Insert List of Quarks
	 *
	 * @param quarks
	 * @throws SQLException
	 */
	public static synchronized List<Integer> insertQuarks(List<Quark> quarks) throws SQLException, IOException {
		List<Integer> autoGeneratedIds = new ArrayList<>();
		if (quarks == null || quarks.size() <= 0) {
			return autoGeneratedIds;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String insertTableSQL = "INSERT INTO t_quark "
				+ "(quark_type, link_external, language, " +
				" created_time, updated_time, status, crawl_data) VALUES"
				+ " (?,?,?,?,?,?,?)";
		LOG.info("insertQuarks query=" + insertTableSQL);

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
			dbConnection.setAutoCommit(false);
			for (Quark q : quarks) {
				preparedStatement.setString(1, q.getQuark_type());
				preparedStatement.setString(2, q.getLink_external());
				preparedStatement.setString(3, q.getLanguage());
				preparedStatement.setLong(4, q.getCreated_time());
				preparedStatement.setLong(5, q.getUpdated_time());
				preparedStatement.setBoolean(6, q.getStatus());
				preparedStatement.setString(7, q.getCrawl_data());

				preparedStatement.addBatch();
			}

			preparedStatement.executeBatch();

			try (ResultSet rs = preparedStatement.getGeneratedKeys()) {
				while (rs.next()) {
					autoGeneratedIds.add(rs.getInt(1));
				}
			}

			dbConnection.commit();
			LOG.info("Records are inserted into t_quark table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}

		return autoGeneratedIds;
	}

	/**
	 * Update List of Quarks
	 *
	 * @param quarks
	 * @throws SQLException
	 */
	public static List<Integer> updateQuarks(List<Quark> quarks) throws SQLException, IOException {
		List<Integer> ids = new ArrayList<>();
		if (quarks == null || quarks.size() <= 0) {
			return ids;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String updateTableSQL = "UPDATE t_quark "
				+ "SET updated_time = ?, crawl_data = ?"
				+ " WHERE id = ? ";
		LOG.info("updateQuarks query=" + updateTableSQL);

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(updateTableSQL);
			dbConnection.setAutoCommit(false);
			for (Quark q : quarks) {
				preparedStatement.setLong(1, q.getUpdated_time());
				preparedStatement.setString(2, q.getCrawl_data());
				preparedStatement.setInt(3, q.getId());

				preparedStatement.addBatch();
				ids.add(q.getId());
			}

			preparedStatement.executeBatch();

			dbConnection.commit();
			LOG.info("Records are updated into t_quark table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}

		return ids;
	}


//	/**
//	 * Insert or Update List of Quarks
//	 *
//	 * @param quarks
//	 * @throws SQLException
//	 */
//	public static List<Integer> insertUpdateQuarks(List<Quark> quarks) throws SQLException, IOException {
//		if (quarks == null || quarks.size() <= 0) {
//			return null;
//		}
//
//		List<Integer> autoGeneratedIds = new ArrayList<>();
//
//		Connection dbConnection = null;
//		PreparedStatement preparedStatement = null;
//		String insertTableSQL = "INSERT INTO t_quark "
//				+ "(quark_type, link_external, language, " +
//				" created_time, updated_time, status, crawl_data) VALUES"
//				+ " (?,?,?,?,?,?,?)"
//				+ " ON DUPLICATE KEY UPDATE crawl_data = VALUES(crawl_data), updated_time = VALUES(updated_time) ";
//		LOG.info("insertUpdateQuarks query=" + insertTableSQL);
//
//		try {
//			dbConnection = getDBConnection();
//			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
//			dbConnection.setAutoCommit(false);
//			for (Quark q : quarks) {
//				preparedStatement.setString(1, q.getQuark_type());
//				preparedStatement.setString(2, q.getLink_external());
//				preparedStatement.setString(3, q.getLanguage());
//				preparedStatement.setLong(4, q.getCreated_time());
//				preparedStatement.setLong(5, q.getUpdated_time());
//				preparedStatement.setBoolean(6, q.getStatus());
//				preparedStatement.setString(7, q.getCrawl_data());
//
//				preparedStatement.addBatch();
//			}
//
//			preparedStatement.executeBatch();
//
//			try (ResultSet rs = preparedStatement.getGeneratedKeys()) {
//				while (rs.next()) {
//					autoGeneratedIds.add(rs.getInt(1));
//				}
//			}
//
//			dbConnection.commit();
//			LOG.info("Records are inserted into t_quark table!");
//		} catch (SQLException e) {
//			LOG.error(e.getMessage());
//		} finally {
//			if (preparedStatement != null) {
//				preparedStatement.close();
//			}
//			if (dbConnection != null) {
//				dbConnection.close();
//			}
//		}
//
//		return autoGeneratedIds;
//	}

	/**
	 * Insert or Update List of Quarks
	 *
	 * @param quarks
	 * @return
	 */
	public static synchronized List<Integer> insertUpdateQuarks(List<Quark> quarks) throws IOException, SQLException {
		List<Integer> ids = new ArrayList<>();
		if (quarks == null || quarks.size() <= 0) {
			return ids;
		}
		List<Quark> existedQuarks = new ArrayList<>();
		List<Quark> newQuarks = new ArrayList<>();

		checkExistedQuarksByLinkExternals(quarks);

		for (Quark quark : quarks) {
			if (quark.isExisted()) {
				existedQuarks.add(quark);
			} else {
				newQuarks.add(quark);
			}
		}

		List<Integer> existedIds = updateQuarks(existedQuarks);
		List<Integer> newIds = insertQuarks(newQuarks);
		ids =  new ArrayList<>(existedIds);
		ids.addAll(newIds);

		return ids;
	}

	/**
	 * Insert List of QuarkTranslations
	 * @param quarkTranslations
	 * @throws SQLException
	 */
	public static synchronized void insertUpdateQuarkTranslations(List<QuarkTranslation> quarkTranslations) throws SQLException, IOException {
		if (quarkTranslations == null || quarkTranslations.size() <= 0) {
			return;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String insertTableSQL = "INSERT INTO t_quark_translation"
				+ "(quark_id, language_code, title, description, manufacturer, country, address_lv1) VALUES"
				+ "(?,?,?,?,?,?,?)"
				+ " ON DUPLICATE KEY UPDATE description = VALUES(description) ";
		LOG.info("insertUpdateQuarkTranslations query=" + insertTableSQL);

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
			dbConnection.setAutoCommit(false);

			for (QuarkTranslation quarkTranslation : quarkTranslations) {
				preparedStatement.setLong(1, quarkTranslation.getQuark_id());
				preparedStatement.setString(2, quarkTranslation.getLanguage_code());
				preparedStatement.setString(3, quarkTranslation.getTitle());
				preparedStatement.setString(4, quarkTranslation.getDescription());
				preparedStatement.setString(5, quarkTranslation.getManufacturer());
				preparedStatement.setString(6, quarkTranslation.getCountry());
				preparedStatement.setString(7, quarkTranslation.getAddress_lv1());

				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
			dbConnection.commit();
			LOG.info("Records are inserted into t_quark_translation table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}
	}

	/**
	 * Insert or Update QuarkCountries
	 *
	 * @param countries
	 * @throws SQLException
	 */
	public static synchronized void insertUpdateQuarkCountries(Set<QuarkCountry> countries) throws SQLException, IOException {
		if (countries == null || countries.size() <= 0) {
			LOG.info("insertUpdateQuarkCountries: countries is null or empty => ignore");
			return;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String insertTableSQL = "INSERT IGNORE INTO t_quark_country"
				+ " (code) VALUES (?)";
		LOG.info("insertUpdateQuarkCountries query=" + insertTableSQL);

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
			dbConnection.setAutoCommit(false);

			for (QuarkCountry country : countries) {
				preparedStatement.setString(1, country.getCode());

				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
			dbConnection.commit();
			LOG.info("Records are inserted into t_quark_country table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}
	}

	/**
	 * Insert or update Crawled Brands
	 *
	 * @param crawledBrands
	 * @throws SQLException
	 * @throws IOException
	 */
	public static synchronized void insertUpdateCrawledBrands(Set<CrawledBrand> crawledBrands) throws SQLException, IOException {
		if (crawledBrands == null || crawledBrands.size() <= 0) {
			LOG.info("insertUpdateCrawledBrands: crawledBrands is null or empty => ignore");
			return;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String insertTableSQL = "INSERT IGNORE INTO t_brand_crawled"
				+ " (name) VALUES (?)";
		LOG.info("insertUpdateCrawledBrands query=" + insertTableSQL);

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
			dbConnection.setAutoCommit(false);

			for (CrawledBrand brand : crawledBrands) {
				preparedStatement.setString(1, brand.getName());

				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
			dbConnection.commit();
			LOG.info("Records are inserted into t_brand_crawled table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}
	}


	/**
	 * Insert List of ValueBands
	 * @param valueBands
	 * @throws SQLException
	 */
	public static synchronized void insertValueBands(List<ValueBand> valueBands) throws SQLException, IOException {
		if (valueBands == null || valueBands.size() <= 0) {
			return;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String insertTableSQL = "INSERT INTO t_value_band (raw_name, category_id, type, name, created_time) VALUES (?,?,?,?,?)";
		LOG.info("insertValueBands query=" + insertTableSQL);

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);

			dbConnection.setAutoCommit(false);

			for (ValueBand valueBand : valueBands) {
				preparedStatement.setString(1, valueBand.getRaw_name());
				preparedStatement.setLong(2, valueBand.getCategory_id());
				preparedStatement.setString(3, valueBand.getType());
				preparedStatement.setString(4, valueBand.getName());
				preparedStatement.setLong(5, valueBand.getCreated_time());

				preparedStatement.addBatch();
			}
			preparedStatement.executeBatch();
			dbConnection.commit();
			LOG.info("Records are inserted into t_value_band table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}
	}


	/**
	 * Insert ValueBand
	 *
	 * @param valueBand
	 * @throws SQLException
	 */
	public static synchronized ValueBand insertValueBand(ValueBand valueBand) throws SQLException, IOException {
		if (valueBand == null) {
			return null;
		}

		LOG.info("insertValueBand: valueband=" + valueBand.toString());

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String insertTableSQL = "INSERT INTO t_value_band (raw_name, category_id, type, name, created_time) VALUES (?,?,?,?,?)";

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, valueBand.getRaw_name());
			preparedStatement.setLong(2, valueBand.getCategory_id());
			preparedStatement.setString(3, valueBand.getType());
			preparedStatement.setString(4, valueBand.getName());
			preparedStatement.setLong(5, valueBand.getCreated_time());

			LOG.info("insertValueBand query=" + insertTableSQL);
			preparedStatement.executeUpdate();
			ResultSet rs = preparedStatement.getGeneratedKeys();
			if (rs.next()) {
				valueBand.setId(rs.getInt(1));
			}
			LOG.info("Records are inserted into t_value_band table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}

		return valueBand;
	}

	/**
	 * Get ValueBand By Name
	 * @param name
	 * @return
	 */
	public static synchronized ValueBand getValueBandByName(String name) throws IOException {
		ValueBand valueBand = null;

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String selectSQL = "SELECT * FROM t_value_band WHERE name = ?";

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(selectSQL);
			preparedStatement.setString(1, name);
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				valueBand = new ValueBand();
				valueBand.setId(rs.getInt("id"));
				valueBand.setRaw_name(rs.getString("raw_name"));
				valueBand.setName(rs.getString("name"));
				valueBand.setType(rs.getString("type"));
				valueBand.setCategory_id(rs.getInt("category_id"));
				valueBand.setCreated_time(rs.getInt("created_time"));
			}
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return valueBand;
	}

	/**
	 * Insert Category
	 *
	 * @param category
	 * @return
	 * @throws SQLException
	 */
	public static synchronized Category insertCategory(Category category) throws SQLException, IOException {
		if (category == null) {
			return null;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String insertTableSQL = "INSERT INTO t_value_band_category (category, language, is_system) VALUES (?,?,?)";

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, category.getCategory());
			preparedStatement.setString(2, category.getLanguage());
			preparedStatement.setBoolean(3, category.is_system());

			LOG.info("insertCategory query=" + insertTableSQL);
			preparedStatement.executeUpdate();
			ResultSet rs = preparedStatement.getGeneratedKeys();
			if (rs.next()) {
				category.setId(rs.getInt(1));
			}
			LOG.info("Records are inserted into t_value_band_category table!");
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}

		return category;
	}

	/**
	 * Get Category By Name and Language
	 * @param name
	 * @return
	 */
	public static Category getCategoryByNameAndLanguage(String name, String language) throws IOException {
		Category category = new Category();


		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String selectSQL = "SELECT * FROM t_value_band_category WHERE (category = ? AND language = ?)";

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(selectSQL);
			preparedStatement.setString(1, name);
			preparedStatement.setString(2, language);
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				category.setId(rs.getInt("id"));
				category.setCategory(name);
				category.setLanguage(rs.getString("language"));
				category.setIs_system(rs.getBoolean("is_system"));
			}
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return category;
	}

	/**
	 * Get Or Insert Category
	 *
	 * @return
	 */
	public static synchronized Category getOrInsertCategory(String name, String language) {
		Category category = new Category();

		try {
			category = getCategoryByNameAndLanguage(name, language);
		} catch (IOException e) {
			e.printStackTrace();
		}

		if (category == null || category.getId() <= 0) {
			category.setCategory(name);
			category.setLanguage(language);
			category.setIs_system(false);
			try {
				insertCategory(category);
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return category;
	}

	/**
	 * Get Quarks By Ids
	 *
	 * @param ids
	 * @return
	 */
	public static List<Quark> getQuarksByIds(List<Integer> ids, ValueBand valueBand, Category category) throws IOException {
		List<Quark> quarks = new ArrayList<>();
		if (ids == null || ids.size() <= 0)
			return quarks;

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String selectSQL = createSelectQuarksByIdsQuery(ids.size());

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(selectSQL);

			for (int i = 1; i <= ids.size(); i++) {
				preparedStatement.setLong(i, ids.get(i - 1));
			}

			ResultSet rs = preparedStatement.executeQuery();

			while (rs.next()) {
				Quark quark = new Quark();

				quark.setId(rs.getInt("id"));
				quark.setQuark_type(rs.getString("quark_type"));
				quark.setLink_external(rs.getString("link_external"));
				quark.setUser_id(rs.getInt("user_id"));
				quark.setBrand_id(rs.getInt("brand_id"));
				quark.setLanguage(rs.getString("language"));
				quark.setCreated_time(rs.getInt("created_time"));
				quark.setUpdated_time(rs.getInt("updated_time"));
				quark.setStatus(rs.getBoolean("status"));
				quark.setCrawl_data(rs.getString("crawl_data"));

				String productString = quark.getCrawl_data();
				ObjectMapper mapper = new ObjectMapper();
				try {
					// Deserialize productString to Product object
					Product product = mapper.readValue(productString, Product.class);
					if (product != null) {
						quark.setAddress_lv1_en(product.getAddress());
						quark.setModel_name_en(product.getModel_name_en());

						if (StringUtils.isNotEmpty(product.getImageUrl())) {
							quark.setHas_photo(true);
							List<String> photos = new ArrayList<>();
							// Set photos
							if (StringUtils.isNotBlank(product.getCompanyLogo())) {
								photos.add(product.getCompanyLogo());
							} else {
								photos.add("");
							}
							photos.add(product.getImageUrl());
							/*if (product.getMultipleImageUrls() != null && !product.getMultipleImageUrls().isEmpty()) {
								photos.addAll(product.getMultipleImageUrls());
							}*/
							quark.setPhotos(photos);
						}

						quark.setList_languages(new ArrayList<>(Arrays.asList(Constants.LANGUAGE)));// TODO: fix hardcode
						quark.setCountry_code_en(product.getCountry_code());
						quark.setTitle_en(product.getName());
						quark.setManufacturer_en(product.getCompany());
						quark.setCountry_en(product.getCountry());
						quark.setAddress_lv1_en(product.getAddress());
						quark.setDelete_flag(false);
						quark.setValue_bands_en(new ArrayList<>(Arrays.asList(valueBand.getName())));
						quark.setValue_bands_data_en(new ArrayList<>(Arrays.asList(valueBand.getRaw_name()
						+ "::" + category.getCategory() + "::" + valueBand.getId())));
						quark.setVb_raw_name_en(new ArrayList<>(Arrays.asList(valueBand.getRaw_name())));
						quark.setVb_category_en(new ArrayList<>(Arrays.asList(valueBand.getCategory())));
						
						quark.setModel_name_en(product.getModel_name_en());
						if (StringUtils.isNotEmpty(product.getPrice())) {
							quark.setPrice(product.getPrice());
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
				}

				quarks.add(quark);
			}

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return quarks;
	}

	/**
	 * Check Existed Quarks By LinkExternals
	 *
	 * @param quarks
	 */
	public static void checkExistedQuarksByLinkExternals(List<Quark> quarks) {
		if (quarks == null || quarks.size() <= 0)
			return;

		Map<String, Integer> existedLinks = new HashMap<>();

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String selectSQL = createSelectQuarksByLinkExternalsQuery(quarks.size());

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(selectSQL);
			for (int i = 1; i <= quarks.size(); i++) {
				preparedStatement.setString(i, quarks.get(i - 1).getLink_external());
			}
			// execute select SQL statement
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				existedLinks.put(rs.getString("link_external"), rs.getInt("id"));
			}
			for (Quark quark : quarks) {
				if (existedLinks.containsKey(quark.getLink_external())) {
					quark.setExisted(true);
					quark.setId(existedLinks.get(quark.getLink_external()));
				}
			}
		} catch (Exception e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * Get CurrentTime in Seconds
	 *
	 * @return CurrentTime in Seconds
	 */
	public static long getCurrentTimeSeconds() {
		return System.currentTimeMillis() / 1000;
	}

	/**
	 * Create query for select multi Quarks by ids
	 *
	 * @param length
	 * @return
	 */
	private static String createSelectQuarksByIdsQuery(int length) {
		String query = "SELECT * FROM t_quark where id in (";
		StringBuilder queryBuilder = new StringBuilder(query);
		for (int i = 0; i < length; i++) {
			queryBuilder.append(" ?");
			if (i != length - 1) queryBuilder.append(",");
		}
		queryBuilder.append(")");

		return queryBuilder.toString();
	}

	/**
	 * Create query for select Quarks By LinkExternals
	 *
	 * @param length
	 * @return
	 */
	private static String createSelectQuarksByLinkExternalsQuery(int length) {
		String query = "SELECT * FROM t_quark where link_external in (";
		StringBuilder queryBuilder = new StringBuilder(query);
		for (int i = 0; i < length; i++) {
			queryBuilder.append(" ?");
			if (i != length - 1) queryBuilder.append(",");
		}
		queryBuilder.append(")");

		return queryBuilder.toString();
	}

	private static String createUpdateQuarksQuery(int length) {
		String query = "SELECT * FROM t_quark where link_external in (";
		StringBuilder queryBuilder = new StringBuilder(query);
		for (int i = 0; i < length; i++) {
			queryBuilder.append(" ?");
			if (i != length - 1) queryBuilder.append(",");
		}
		queryBuilder.append(")");

		return queryBuilder.toString();
	}

	/* MYSQL Table t_location_info
	* id INT(11) Primary Key Not Null Auto Increment
	* address VARCHAR(50)
	* country_code VARCHAR(50)
	* country_name VARCHAR(50)
	* city_province VARCHAR(50)
	* json TEXT*/

	/**
	 * Get LocationInfo By Address
	 * @param address
	 * @return
	 */
	public static synchronized LocationInfo getLocationInfoByAddress(String address) throws IOException {
		LocationInfo loc = null;

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String selectSQL = "SELECT * FROM t_location_info WHERE address = ?";

		try {
			dbConnection = getDBConnection();
			preparedStatement = dbConnection.prepareStatement(selectSQL);
			preparedStatement.setString(1, address);
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				loc = new LocationInfo();
				loc.setId(rs.getInt("id"));
                loc.setCountryCode(rs.getString("country_code"));
                loc.setCountryName(rs.getString("country_name"));
                loc.setCityProvince(rs.getString("city_province"));
				loc.setAddress(rs.getString("address"));
				loc.setJson(rs.getString("json"));
			}
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				try {
					preparedStatement.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			if (dbConnection != null) {
				try {
					dbConnection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return loc;
	}

	/**
	 * Insert  QuarkAddress
	 *
	 * @param address
	 * @param json
	 * @throws SQLException
	 */
	public static synchronized void insertQuarkAddress(String address, String country_code, String country_name, String city_province, String json) throws SQLException, IOException {
		if (address == null || json == null) {
			return;
		}

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String insertTableSQL = "INSERT INTO t_location_info (address, country_code, country_name, city_province, json) VALUES (?,?,?,?,?)";

		try {
			dbConnection = getDBConnection();
			dbConnection.setAutoCommit(false);
			preparedStatement = dbConnection.prepareStatement(insertTableSQL, Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, address);
            preparedStatement.setString(2, country_code);
            preparedStatement.setString(3, country_name);
            preparedStatement.setString(4, city_province);
			preparedStatement.setString(5, json);

			preparedStatement.executeUpdate();
			dbConnection.commit();
		} catch (SQLException e) {
			LOG.error(e.getMessage());
		} finally {
			if (preparedStatement != null) {
				preparedStatement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}
	}
}
